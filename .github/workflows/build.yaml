on:
  push:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - { os: ubuntu-latest,  host: x86_64 }
          - { os: macos-latest,   host: mac }

    steps:
      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          sudo apt install -y \
              autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev \
              libgmp-dev gawk build-essential bison flex texinfo gperf libtool \
              patchutils bc zlib1g-dev libexpat-dev git

      - name: Install dependencies (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install python3 gawk gnu-sed coreutils gmp mpfr libmpc isl zlib expat texinfo flock
          echo "/usr/local/opt/gawk/libexec/gnubin" >> $GITHUB_PATH
          echo "/usr/local/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH
          echo "/usr/local/opt/coreutils/libexec/gnubin" >> $GITHUB_PATH

      - name: Prepare Case-insensitive FS (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          hdiutil create -size 20g -fs 'Case-sensitive APFS' -type SPARSEBUNDLE -volname gcc gcc.sparsebundle
          hdiutil mount gcc.sparsebundle
          ln -s /Volumes/gcc $GITHUB_WORKSPACE/gcc

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{ github.workspace }}/gcc

      - name: Restore submodules cache
        id: cache-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/gcc/.git/modules
          key: gitmodules-${{ hashFiles('gcc/.gitmodules') }}

      - name: Initialize submodules
        working-directory: ${{ github.workspace }}/gcc
        run: git submodule update --init --recursive --progress --recommend-shallow

      - name: Save submodules cache
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}/gcc/.git/modules
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

      - name: Build toolchain
        working-directory: ${{ github.workspace }}/gcc
        run: |
          ./build-csky-gcc.py csky-gcc \
            --src . \
            --triple csky-minilibc-elf \
            --host ${{ matrix.host }} \
            --no-multilib \
            --cpu ck804ef \
            --fpu hard \
            --endian little \
            --disable-gdb \
            --jobs=$(nproc)

      - name: Make tarball
        run: |
          tar czvf Xuantie-800-gcc-elf-newlib-${{ matrix.host }}.tar.gz \
            -C ${{ github.workspace }}/gcc/build-gcc-csky-unknown-elf/ \
            Xuantie-800-gcc-elf-newlib-${{ matrix.host }}/

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: Xuantie-800-gcc-elf-newlib-${{ matrix.host }}
          path: Xuantie-800-gcc-elf-newlib-${{ matrix.host }}.tar.gz
